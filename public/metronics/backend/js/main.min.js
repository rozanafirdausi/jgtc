/*! SUITCOMMERCE METRONICS | Suitmedia */

;(function ( window, document, $, undefined ) {

    var $window = $(window);

    var states = {
        navShow: 'nav--show',
        navStick: 'nav--stick',
        active: 'is-active'
    };

    var Site = {

        init: function () {
            Site.navToggle();
            Site.subnav();
            Site.lockNav();
            Site.inputMaskNumber();
            Site.inputDate();
            Site.inputTime();
            Site.inputDateTime();
            Site.inputRangeDate();
            Site.inputTag();
            Site.inputColorPicker();
            Site.colorSelector();
            Site.enhanceTable();
            Site.enhanceAjaxTable();
            Site.datatableYadcf();
            Site.plainTable();
            Site.chart();
            Site.progressBar();
            Site.circularProgress();
            Site.tab();
            Site.formValidation();
            Site.changeTableData();
            Site.userAreaMenu();
            Site.elementToggle();
            Site.newElementToggle();
            Site.radioDisableToggle();
            Site.todoList();
            Site.inputAutocomplete();
            Site.selectAutocomplete();
            Site.textareaAutosize();
            Site.discussionBox();
            Site.inputBrowseFiles();
            Site.modal();
            Site.accordion();
            Site.executionDocList();
            Site.equalHeight();
            Site.dashboardTab();
            Site.tooltip();
            Site.wysiwyg();
            Site.scrollToTop();
            Site.openLink();

            window.Site = Site;
        },

        navToggle: function () {
            var $primaryTrigger = $('#primaryNavTrigger'),
                $navTrigger     = $('[data-nav-trigger]'),
                $nav            = $('#nav'),
                $main           = $('#main'),
                navListSub      = '.nav-list--sub';

            var openActiveSubNav = function () {
                var $currentAnchor = $('.nav-anchor.is-active');

                if ( $currentAnchor.parents( navListSub ) ) {
                    $currentAnchor.parents( navListSub ).show();
                    $nav.scrollTop( $currentAnchor.offset().top );
                }
            };

            var toggleNavigation = function (e) {
                e.preventDefault();

                $nav.toggleClass( states.navShow );

                if ( $nav.hasClass( states.navShow ) ) {
                    $primaryTrigger.addClass( states.active );
                    openActiveSubNav();
                } else {
                    $primaryTrigger.removeClass( states.active );
                }
            };

            $navTrigger.on('click', toggleNavigation);
        },

        subnav: function () {
            var $trigger = $('.nav-anchor--has-sub');

            $trigger.on('click', function(e) {
                e.preventDefault();

                var $this = $(this);
                $this.toggleClass('nav-anchor--is-clicked');
                $this.next().slideToggle();
            });
        },

        lockNav: function () {
            var $btnLockNav = $('.nav-lock-btn'),
                $nav        = $('#nav'),
                $navTrigger = $('[data-nav-trigger]'),
                lockActive  = 'nav-lock-btn--active';

            var toggleNavLock = function () {
                var $this = $(this);

                $this.toggleClass( lockActive );

                if ( $this.hasClass( lockActive ) ) {
                    $nav
                        .addClass( states.navStick )
                        .removeClass( states.navShow );

                    $navTrigger.addClass('hidden');
                } else {
                    $nav
                        .addClass( states.navShow )
                        .removeClass( states.navStick );

                    $navTrigger.removeClass('hidden');
                }
            };

            $btnLockNav.on('click', toggleNavLock);
        },

        inputMaskNumber: function () {
            var $inputNumber = $("input[type='number']:not('.js-ignore-number')");

            if ( !$inputNumber.length ) return;

            $inputNumber.attr('type', 'text');
            $inputNumber.inputmask('decimal', {
                rightAlign: false,
                digits: 2
            });
            /*
            $.each($inputNumber, function(index, element) {
                VMasker(element).maskNumber();
            });
            */
        },

        inputDate: function () {
            var $inputDate = $('input[type="date"]');

            if ( !$inputDate.length ) return;

            var initPlugin = function () {
                $.each($inputDate, function(index, elem) {
                    elem.setAttribute('type', 'text');
                    rome(elem, {
                        time: false,
                        inputFormat: 'YYYY-MM-DD'
                    });
                });
            };

            initPlugin();


        },

        inputTime: function () {
            var $inputDate = $('input[type="time"]');

            if ( !$inputDate.length ) return;

            $.each($inputDate, function(index, elem) {
                elem.setAttribute('type', 'text');
                rome(elem, {
                    date: false
                });
            });
        },

        inputDateTime: function () {
            var $inputDate = $('[data-datetime-input]');

            if ( !$inputDate.length ) return;

            $.each($inputDate, function(index, elem) {
                rome(elem, {
                    inputFormat: 'YYYY-MM-DD HH:mm:ss'
                });
            });
        },

        inputRangeDate: function () {
            var inputStart = document.querySelector('[data-date-range-start]');
            var inputEnd = document.querySelector('[data-date-range-end]');

            if ( !inputStart ) return;

            var inputStartType = inputStart.getAttribute('data-date-range-start');
            var inputEndType = inputEnd.getAttribute('data-date-range-end');

            var startOpts = { dateValidator: rome.val.beforeEq( inputEnd ) };
            var EndOpts = { dateValidator: rome.val.afterEq( inputStart ) };

            if ( inputStartType === 'datetime' ) {
                startOpts.inputFormat = 'YYYY-MM-DD HH:mm:ss';
            } else if ( inputStartType === 'date' ) {
                startOpts.time = false;
                startOpts.inputFormat = 'YYYY-MM-DD';
            } else if ( inputStartType === 'time' ) {
                startOpts.date = false;
            }

            if ( inputEndType === 'datetime' ) {
                EndOpts.inputFormat = 'YYYY-MM-DD HH:mm:ss';
            } else if ( inputEndType === 'date' ) {
                EndOpts.time = false;
                EndOpts.inputFormat = 'YYYY-MM-DD';
            } else if ( inputEndType === 'time' ) {
                EndOpts.date = false;
            }

            rome.find(inputStart).options( startOpts );
            rome.find(inputEnd).options( EndOpts );
        },

        inputTag: function () {
            var $inputTags = $('[data-input-tag]');

            if ( !$inputTags.length ) return;

            $.each($inputTags, function(index, elem) {
                insignia(elem, {
                    deletion: true
                });
            });
        },

        inputColorPicker: function () {
            var $inputTags = $('[data-input-color]');

            if (!$inputTags.length ) return;

            $.each($inputTags, function() {
                var $elem  = $(this);
                var $previewTarget = $($elem.attr('data-input-color-preview-target'));
                $previewTarget.css('background-color', '#' + $elem.val());

                $elem.ColorPicker({
                    onSubmit: function(hsb, hex, rgb, el) {
                        $(el).val(hex);
                        $(el).ColorPickerHide();
                        $previewTarget.css('background-color', '#' + hex);
                    },
                    onBeforeShow: function () {
                        $(this).ColorPickerSetColor(this.value);
                        $previewTarget.css('background-color', '#' + this.value);
                    }
                })
                .bind('keyup', function(){
                    $(this).ColorPickerSetColor(this.value);
                    $previewTarget.css('background-color', '#' + this.value);
                });
            })
        },

        colorSelector: function () {
            var $inputTags = $('[data-color-selector-target]');

            if (!$inputTags.length ) return;

            $.each($inputTags, function() {
                var $elem  = $(this);
                var $previewTarget = $($elem.attr('data-color-selector-target'));

                $elem.on('change', function() {
                    changePreviewColour($elem, $previewTarget);
                });

                changePreviewColour($elem, $previewTarget); // initial colour if exist
            })

            function changePreviewColour(_selector, _previewTarget) {
                var $selected = _selector.find(':selected');
                subselected = $selected.text().split('|');
                if (subselected.length >= 2) {
                    _previewTarget.css('background-color', '#' + subselected[1].trim());
                } else {
                    _previewTarget.css('background-color', '#FFFFFF');
                }
            }
        },

        enhanceTable: function () {
            var $tables = $('[data-enhance-table]');

            if ( !$tables.length ) return;

            var defaultOpts = {
                //scrollX: false,
                autoWidth: false,
                aaSorting: []
            };

            $tables.find('thead > tr > th:last-child').addClass('all');

            $.each($tables, function() {
                var $elem           = $(this);
                var dataURL         = $elem.attr('data-table-source');
                var lengthChange    = $elem.data('length-change') || true;
                var dataStart       = $elem.data('start') || false;
                var dataLength      = $elem.data('length') || false;

                var enablePaging    = $elem.data('enable-paging');
                if (enablePaging == false) {
                    enablePaging = false;
                } else {
                    enablePaging = true;
                }

                var currentOpts     = $.extend(true, defaultOpts, {});

                if ( !lengthChange ) {
                    currentOpts = $.extend(true, currentOpts, {
                        lengthChange: false
                    });
                }

                // enable paging
                if ( !enablePaging ) {
                    currentOpts = $.extend(true, currentOpts, {
                        bPaginate: false
                    });
                }

                // start-length as page position if requested
                if ( dataStart && dataLength ) {
                    currentOpts = $.extend(true, currentOpts, {
                        iDisplayStart: dataStart,
                        iDisplayLength: dataLength
                    });
                }

                if ( !dataURL ) {
                    $elem.dataTable( currentOpts );
                } else {
                    currentOpts = $.extend(true, currentOpts, {
                        ajax: dataURL
                    });

                    $elem.dataTable( currentOpts );
                }
            });
        },

        enhanceAjaxTable: function() {
            var $tables = $('[data-enhance-ajax-table]');

            if ( !$tables.length ) return;

            var defaultOpts = {
                // scrollX: true,
                processing: true,
                serverSide: true,
                searchHighlight: true,
                bAutoWidth: false,
                responsive: true,
                aaSorting: [],
                footerCallback: function( tfoot, data, start, end, display ) {
                    var response = this.api().ajax.json();
                    if ( response ) {
                        var $td = $(tfoot).find('td');
                        $td.each( function (j, td) {
                            var key = ("tfoot_" + j);
                            if (key in response) {
                                $(td).html(response[key]);
                            }
                        });
                    }
                }
                //fixedColumns: {
                //    leftColumns: 2,
                //    rightColumns: 1
                //},
                //scrollCollapse: true
            };

            $tables.find('thead > tr > th:last-child').addClass('all');
            $tables.find('thead > tr > td:last-child').addClass('all');

            $.each($tables, function() {
                var $elem           = $(this);
                var tableID         = '#' + $elem.attr('id');
                var dataURL         = $elem.attr('data-enhance-ajax-table');
                var lengthChange    = $elem.data('length-change') || true;
                var dataStart       = $elem.data('start') || false;
                var dataLength      = $elem.data('length') || false;

                var enablePaging    = $elem.data('enable-paging');
                if (enablePaging == false) enablePaging = false;
                else enablePaging = true;

                var currentOpts     = $.extend(true, defaultOpts, {});

                // For Fixed Column
                var fixedLeftColumn = this.getAttribute('data-datatable-fixed-left-column') || 0;
                var fixedRightColumn = this.getAttribute('data-datatable-fixed-right-column') || 0;

                // disable order in last column
                var lastColumn = 0;
                $elem.find('tr:nth-child(1) td').each(function () {
                    if ($(this).attr('colspan')) {
                        lastColumn += +$(this).attr('colspan');
                    } else {
                        lastColumn++;
                    }
                });
                if (lastColumn > 0) {
                    lastColumn--;
                    currentOpts = $.extend(true, currentOpts, {
                        aoColumnDefs: [
                            {
                                bSortable: false,
                                aTargets: [ lastColumn ]
                            }
                        ]
                    });
                }

                // is length changes?
                if ( !lengthChange ) {
                    currentOpts = $.extend(true, currentOpts, {
                        lengthChange: false
                    });
                }

                // enable paging
                if ( !enablePaging ) {
                    currentOpts = $.extend(true, currentOpts, {
                        bPaginate: false
                    });
                }

                // is URL exist?
                if ( dataURL ) {
                    currentOpts = $.extend(true, currentOpts, {
                        ajax: {
                            url: dataURL,
                            type: "POST"
                        }
                    });
                }

                // start-length as page position if requested
                if ( dataStart && dataLength ) {
                    currentOpts = $.extend(true, currentOpts, {
                        iDisplayStart: dataStart,
                        iDisplayLength: dataLength
                    });
                }

                if ((fixedLeftColumn != null && fixedLeftColumn > 0) && (fixedRightColumn != null && fixedRightColumn > 0)) {
                    currentOpts = $.extend(true, currentOpts, {
                        fixedColumns:   {
                            leftColumns: fixedLeftColumn,
                            rightColumns: fixedRightColumn
                        },
                        scrollX:        true,
                        bscrollCollapse: true
                    });
                }

                // render
                $elem.dataTable( currentOpts );

                if (fixedLeftColumn == 0 && fixedRightColumn == 0) {
                //    $(tableID).wrap('<div class="table-wrapper"></div>');
                }
            });
        },

        datatableYadcf: function () {
            var $tables = $('[data-datatable-yadcf]');

            if (!$tables.length) return;

            var default_opt_yadcf = {
                filter_delay: 500,
                style_class: 'form-input'
            };

            var clear_text = "Clear";

            $tables.find('thead > tr > th:last-child').addClass('all');
            $tables.find('thead > tr > td:last-child').addClass('all');

            $.each($tables, function (index, table) {
                var tableID = '#' + table.id;
                var yDataUrl = this.getAttribute('data-datatable-yadcf') || null;
                var yOrderDisabled = this.getAttribute('data-datatable-yadcf-order-disabled') || null;
                var yColumnWidth = this.getAttribute('data-datatable-yadcf-column-max-width') || "280px";
                var yColumn = this.getAttribute('data-datatable-yadcf-column') || null;
                var yContainer = this.getAttribute('data-datatable-yadcf-container') || null;
                var yLabel = this.getAttribute('data-datatable-yadcf-label') || null;
                var yType = this.getAttribute('data-datatable-yadcf-type') || null;

                var enablePaging = this.getAttribute('data-enable-paging');
                if (enablePaging == 'false') enablePaging = false;
                else enablePaging = true;

                var containers = yContainer != null && yContainer.trim() != "" ? yContainer.split(',') : null;
                var columns = yColumn != null ? yColumn.split(',') : null;
                var labels = yLabel != null ? yLabel.split(',') : null;
                var types = yType != null ? yType.split(',') : null;
                var ordersDisabled = yOrderDisabled != null ? yOrderDisabled.split(',') : null;

                // For Fixed Column
                var fixedLeftColumn = this.getAttribute('data-datatable-fixed-left-column') || 0;
                var fixedRightColumn = this.getAttribute('data-datatable-fixed-right-column') || 0;
                // For Custom Data Start and Length
                var dataRecordStart = this.getAttribute('data-datatable-record-start') || -1;
                var dataRecordLength = this.getAttribute('data-datatable-record-length') || -1;

                // start-length as page position if requested
                var dataStart       = this.getAttribute('data-start') || false;
                var dataLength      = this.getAttribute('data-length') || false;
                if ( dataStart && dataLength ) {
                    dataRecordStart = dataStart;
                    dataRecordLength = dataLength;
                }

                var yadcfOptions = null;
                if (containers != null && containers.length > 0) {
                    yadcfOptions = new Array(containers.length);

                    // Ordering Disable
                    if (ordersDisabled != null) {
                        var columnOrders = new Array(ordersDisabled.length);

                        for (j = 0; j < ordersDisabled.length; j++) {
                            columnOrders[j] = { 'bSortable': false, 'aTargets': parseInt(ordersDisabled[j]) };
                        }
                    }

                    for (i = 0; i < containers.length; i++) {
                        var container_id = $('#' + containers[i]);
                        var container_default_label = $(container_id).attr('data-filter-default-label') || '';
                        var container_column = $(container_id).attr('data-filter-column') || '';
                        var container_minimumInputLength = $(container_id).attr('data-filter-minimum-input-length') || 1;
                        var container_type = $(container_id).attr('data-filter-type') || '';
                        var container_custom_func = $(container_id).attr('data-filter-custom-func') || '';
                        var container_exTrigger = $(container_id).attr('data-filter-ex-trigger') || false;

                        var default_label = (labels != null && labels.length > 0 ? labels[i] : (container_default_label != '' ? container_default_label : '(select...)'));
                        var column = (columns != null && columns.length > 0 ? parseInt(columns[i]) : (container_column != '' ? parseInt(container_column) : 1));
                        var type = (types != null && types.length > 0 ? types[i] : (container_type != '' ? container_type : null));
                        var custom_func = container_custom_func != '' ? container_custom_func : '';

                        var opt_yadcf = $.extend(false, default_opt_yadcf, {
                            column_number: column,
                            filter_container_id: containers[i],
                            filter_default_label: default_label,
                            filter_reset_button_text: !container_exTrigger.length ? clear_text : false,
                            externally_triggered: false
                        });

                        if (type != null && (type != '' || type != ' ')) {
                            opt_yadcf = $.extend(true, opt_yadcf, {
                                filter_type: (type == 'date' || type == 'datetime' ? 'range_date' : type)
                            });

                            if (type == 'date') {
                                var datepickerDefaults = {
                                    time: false
                                };

                                yadcfOptions[i] = $.extend(false, opt_yadcf, {
                                    datepicker_type: 'rome',
                                    date_format: 'YYYY-MM-DD',
                                    filter_plugin_options: datepickerDefaults
                                });
                            } else if (type == 'datetime') {
                                var datepickerDefaults = {
                                    time: true
                                };

                                yadcfOptions[i] = $.extend(false, opt_yadcf, {
                                    datepicker_type: 'rome',
                                    date_format: 'YYYY-MM-DD HH:mm:ss',
                                    filter_plugin_options: datepickerDefaults
                                });
                            } else if (type == 'select') {
                                var container_url = $(container_id).attr('data-filter-url-ajax') || '';

                                if (container_url != null && container_url != '') {
                                    yadcfOptions[i] = $.extend(true, opt_yadcf, {
                                        data: [],
                                        enable_auto_complete: false,
                                        sort_as: "alpha",
                                        sort_order: "asc",
                                        filter_match_mode: "contains",
                                        select_type: 'select2',
                                        select_type_options: {
                                            placeholder: default_label,
                                            ajax: {
                                                url: container_url,
                                                dataType: 'json',
                                                quietMillis: 250,
                                                data: function (params) {
                                                    return {
                                                        q: params.term,
                                                        page: params.page
                                                    };
                                                },
                                                processResults: function (data, params) {
                                                    var more = (params.page * 30) < data.total_count;

                                                    return {
                                                        results: data.items,
                                                        more: more
                                                    };
                                                },
                                                cache: true
                                            },
                                            minimumInputLength: parseInt(container_minimumInputLength),
                                        },
                                        case_insensitive: true
                                    });
                                } else {
                                    yadcfOptions[i] = $.extend(false, opt_yadcf, {
                                        sort_as: "alpha",
                                        sort_order: "asc",
                                        filter_match_mode: "contains"
                                    });
                                }
                            } else if (type === 'custom_func') {
                                yadcfOptions[i] = $.extend(false, opt_yadcf, {
                                    custom_func: Custom.contractFilterFunction
                                });
                            } else {
                                yadcfOptions[i] = $.extend(false, opt_yadcf, {});
                            }
                        } else {
                            yadcfOptions[i] = $.extend(false, opt_yadcf, {});
                        }
                    }
                }

                var datatableYadcfDefaultOptions = {
                    responsive: true,
                    bAutoWidth: false,
                    processing: true,
                    serverSide: true,
                    searchHighlight: true,
                    showGlobalSearch: true,
                    enableColumnFilter: true,
                    columnFilterPosition: "table",
                    resetPaging: true,
                    bPaginate: enablePaging,
                    bRetrieve: true,
                    select: {
                        "style": "single"
                    },
                    ajax: {
                        "url": yDataUrl,
                        "type": "POST"
                    },
                    deferRender: true,
                    aoColumnDefs: columnOrders,
                    aaSorting: [],
                    /*
                    language: {
                        paginate: {
                            previous: '<span class="fa fa-fw fa-arrow-left"></span>',
                            next: '<span class="fa fa-fw fa-arrow-right"></span>'
                        }
                    },
                    */
                    footerCallback: function( tfoot, data, start, end, display ) {
                        var response = this.api().ajax.json();
                        if ( response ) {
                            var $td = $(tfoot).find('td');
                            $td.each( function (j, td) {
                                var key = ("tfoot_" + j);
                                if (key in response) {
                                    $(td).html(response[key]);
                                }
                            });
                        }
                    }
                };

                if ((fixedLeftColumn != null && fixedLeftColumn > 0) && (fixedRightColumn != null && fixedRightColumn > 0)) {
                    datatableYadcfDefaultOptions = $.extend(true, datatableYadcfDefaultOptions, {
                        fixedColumns:   {
                            leftColumns: fixedLeftColumn,
                            rightColumns: fixedRightColumn
                        },
                        scrollX:        true,
                        bscrollCollapse: true
                    });
                }

                if (dataRecordStart >= 0 && dataRecordLength > 0) {
                    datatableYadcfDefaultOptions = $.extend(true, datatableYadcfDefaultOptions, {
                        iDisplayStart: dataRecordStart,
                        iDisplayLength: dataRecordLength
                    });
                }

                oTable2 = $(tableID).DataTable(datatableYadcfDefaultOptions);
                if (yadcfOptions != null) {
                    yadcf.init(oTable2, yadcfOptions);
                    yadcf.exFilterExternallyTriggered(oTable2);
                }

                oTable2.sort();

                $('button.yadcf-filter-reset-button').addClass('btn btn-sm red-intense btn-outline active').wrap("<span style=\"position:absolute;margin:3px 8px;top:0px;right:-90px;float:left;\"></span>");
                $('select.yadcf-filter').addClass('select2');
                $('select.yadcf-filter').attr('data-select-autocomplete', '');
                $('select.yadcf-filter').attr('style', 'width: 100%;');
                $('div.yadcf-filter-wrapper-inner').attr('style', 'width: 100%;');

                $('input.yadcf-filter-date').addClass('form-input form-control');
                $('input.yadcf-filter-range-date').addClass('form-input form-control').attr('style', 'width: 45%;display:inline;');

                /*$('button.yadcf-filter-reset-button').addClass('btn btn--gray').wrap("<span style=\"position:absolute;margin:3px 8px;float:left;\"></span>");*/

                if (fixedLeftColumn == 0 && fixedRightColumn == 0) {
                    $(tableID).wrap('<div class="table-wrapper"></div>');
                }
            });
        },

        plainTable: function () {
            var $tables = $('[data-enhance-table-plain]');

            if ( !$tables.length ) return;

            var defaultOpts = {
                  scrollX: false,
                  autoWidth: true,
                  aaSorting: [],
                  searching: false,
                  paging: false,
                  ordering: false,
                  info: false
              };

            $tables.find('thead > tr > th:last-child').addClass('all');

            $.each($tables, function() {
                var $elem           = $(this);
                var dataURL         = $elem.attr('data-table-source');
                var lengthChange    = $elem.data('length-change') || true;
                var dataStart       = $elem.data('start') || false;
                var dataLength      = $elem.data('length') || false;

                var enablePaging    = $elem.data('enable-paging');
                if (enablePaging == false) {
                    enablePaging = false;
                } else {
                    enablePaging = true;
                }

                var currentOpts     = $.extend(true, defaultOpts, {});

                if ( !lengthChange ) {
                    currentOpts = $.extend(true, currentOpts, {
                        lengthChange: false
                    });
                }

                // enable paging
                if ( !enablePaging ) {
                    currentOpts = $.extend(true, currentOpts, {
                        bPaginate: false
                    });
                }

                // start-length as page position if requested
                if ( dataStart && dataLength ) {
                    currentOpts = $.extend(true, currentOpts, {
                        iDisplayStart: dataStart,
                        iDisplayLength: dataLength
                    });
                }

                if ( !dataURL ) {
                    $elem.dataTable( currentOpts );
                } else {
                    currentOpts = $.extend(true, currentOpts, {
                        ajax: dataURL
                    });

                    $elem.dataTable( currentOpts );
                }
            });
        },

        chart: function () {
            var $chart = $('[data-chart]');

            $.each($chart, function( index, elem ) {
                var chartType = elem.getAttribute('data-chart');
                var dataURL = elem.getAttribute('data-value');

                $.getJSON(dataURL, function(json, textStatus) {
                    generateChart( elem, chartType, json );
                });
            });

            function generateChart( elem, type, opts ) {
                var $elem = $(elem);
                var layout = elem.getAttribute('data-layout');
                var currentOpts = $.extend(true, Suitcommerce.chartOpts[type], {});
                var depth = $elem.data('depth') || 45;
                currentOpts.title.text = opts.title;
                currentOpts.series = opts.series;

                if ( type !== 'pie' ) {
                    currentOpts.xAxis = opts.xAxis;

                    if ( type !== 'barLine' ) {
                        currentOpts.yAxis.title.text = opts.yAxisTitle;
                    } else {
                        currentOpts.yAxis = opts.yAxis;
                    }
                }

                if ( type === 'pie' ) {
                    currentOpts.plotOptions.pie.depth = depth;
                }

                if ( type === 'pie' && layout === 'vertical' ) {
                    $.extend(true, currentOpts, {
                        legend: {
                            layout: 'vertical',
                            verticalAlign: 'top',
                            align: 'right',
                            itemMarginBottom: 8,
                            y: 16
                        }
                    });

                }

                var showTitle = $elem.data('show-title');
                if ( showTitle === false ) {
                    currentOpts.title.text = null;
                }

                var showLegend = $elem.data('show-legend');
                if ( showLegend === false ) {
                    currentOpts.legend.enabled = false;
                }

                $(elem).highcharts( currentOpts );
            }
        },

        progressBar: function () {
            var $progress = $('.progress');

            if ( !$progress.length ) return;

            $.each($progress, function(index, elem) {
                var $elem = $(elem);
                var value = parseInt($elem.attr('data-progress'), 10);
                var label = $elem.data('label');
                var $progressBar = $elem.find('.progress__bar');

                $progressBar.css('width', value + '%');

                if ( label ) {
                    $progressBar.append( progressLabel(label, value) );
                }
            });

            function progressLabel( label, percentage ) {
                var $labelElem = $('<span>');
                $labelElem
                    .addClass('progress__label')
                    .append(label);

                if ( percentage >= 50 ) {
                    $labelElem.addClass('progress__label--overlay');
                }

                return $labelElem;
            }
        },

        circularProgress: function () {
            var $circularProgress = $('.circular-progress');

            if ( !$circularProgress.length ) return;

            var defaultAttr = {
                'data-fgcolor': '#AFC331',
                'data-width': '24',
                'data-dimension': '220',
                'data-fontsize': '36'
            };

            $.each($circularProgress, function(index, el) {
                 var $this = $(el);
                 var value = $this.attr('data-percent');

                 $this
                    .attr( defaultAttr )
                    .attr('data-text', value + '%')
                    .circliful();
            });
        },

        tab: function () {
            var $tabby = $('.tabby');

            $tabby.on('click', '.tabby-trigger', function(e) {
                e.preventDefault();

                var $this = $(this);

                if ( $this.hasClass('active') ) return;

                var target = $this.attr('href');
                var $target = $(target);

                $this.siblings().removeClass('active');
                $this.addClass('active');

                $target.siblings().removeClass('active');
                $target.addClass('active');
            });
        },

        formValidation: function () {
            var $formToValidate = $('[data-validate-form]');

            if ( !$formToValidate.length ) return;

            var initPlugin = function () {
                $formToValidate.bazeValidate({
                    classInvalid: 'form-input--error',
                    classValid  : 'form-input--success',
                    classMsg    : 'form-msg'
                });
            };

            initPlugin();
        },

        changeTableData: function () {
            var $select = $('[data-change-table-data]');

            $select.on('change', function() {
                var $this = $(this);
                var $target = $( $this.attr('data-change-table-data') );
                var $selected = $this.find(':selected');
                var dataURL = $selected.attr('data-source');

                Suitcommerce.changeTableData( dataURL, $target );
            });
        },

        userAreaMenu: function () {
            var $trigger = $('#userAreaAnchor');
            var $menu = $('#userAreaMenu');

            $trigger.on('click', function(e) {
                e.preventDefault();

                $menu.toggleClass('user-area-menu--show');
            });
        },

        elementToggle: function () {
            var $triggers = $('[data-toggle]');

            if ( !$triggers.length ) return;

            var toggleElement = function (e) {
                e.preventDefault();

                var $target = $( this.getAttribute('data-toggle') );
                $target.toggle();
            };

            $triggers.click( toggleElement );
        },

        newElementToggle: function () {
            var $toggles = $('.toggles');

            if ( !$toggles.length ) return;

            $toggles.on('click', '.toggles__trigger', function () {
                var $this   = $(this);
                var $target = $( $this.attr('data-target') );

                $target.slideToggle();

                if ( $target.is(':visible') ) {
                    $target.siblings('.toggles__content').hide();
                }
            });
        },

        radioDisableToggle: function () {
            var $trigger = $('[data-toggle-disable]');

            if ( !$trigger.length ) return;

            var attrDisabled = 'disabled';

            var toggleDisableness = function (e) {
                var $this = $(e.target);
                var target = $this.attr('data-toggle-disable');

                disableAllElement();

                if ( !target ) return;

                $(target).removeAttr( attrDisabled );
            };

            $trigger.change( toggleDisableness );

            function disableAllElement() {
                $.each($trigger, function(index, el) {
                     var $el = $(el);
                     var target = $el.attr('data-toggle-disable');
                     var $target = $(target);

                     $target.attr( attrDisabled, attrDisabled );
                });
            }
        },

        todoList: function () {
            var list = document.querySelector('#todoList');

            if ( !list ) return;

            var $list = $(list);

            var sortable;
            var sortableOpts = {
                animation: 300,
                ghostClass: 'todo-placeholder'
            };

            var templateTodoForm = $('#templateNewTodo').html();
            var $btnAddTodo = $('#addTodo');

            initSortableList();

            $btnAddTodo.on('click', showTodoForm);

            function initSortableList() {
                sortable = Sortable.create(list, sortableOpts);
            }

            function destroySortableList() {
                sortable.destroy();
            }

            function enableBtnAddTodo() {
                $btnAddTodo.removeAttr('disabled');
            }

            function showTodoForm() {
                destroySortableList();

                $(this).attr('disabled', 'disabled');

                var $newTodoForm = $( templateTodoForm );
                var $newTodoFormInput = $newTodoForm.find('#inputTodoTitle');
                var $newTodoFormBtn = $newTodoForm.find('#inputTodoBtn');

                $list.append( $newTodoForm );

                $newTodoFormInput.keyup( function () {
                    var val = this.value;

                    if ( val === '' || val === null ) {
                        $newTodoFormBtn.attr('disabled', 'disabled');
                    } else {
                        $newTodoFormBtn.removeAttr('disabled', 'disabled');
                    }
                });
                $newTodoFormInput.focus();

                $newTodoFormBtn.on('click', function() {
                    createTodoLabel( $newTodoFormInput.val(), $newTodoFormInput, $newTodoFormBtn );
                });
            }

            function createTodoLabel( label, inputElem, inputBtn ) {
                var $todoLabel = inputElem.siblings('.label-checkbox');
                var $todoInput = $todoLabel.find('.todo__input');
                var UID = Suitcommerce.getUID();

                $todoLabel.attr('for', UID);
                $todoInput.attr('id', UID);

                var todoAnchor = document.createElement('span');
                var $todoAnchor = $(todoAnchor);
                $todoAnchor
                    .text( label )
                    .addClass('todo__title');

                inputElem.siblings('.label-checkbox').append( $todoAnchor );
                inputElem.remove();
                inputBtn.remove();
                initSortableList();

                enableBtnAddTodo();
            }
        },

        inputAutocomplete: function () {
            var $inputs = $('[data-autocomplete]');

            if ( !$inputs.length ) return;

            var inputAutocompletes = [];

            $.each($inputs, function(index, el) {
                 var url = el.getAttribute('data-autocomplete');

                $.getJSON(url, function ( data, status ) {
                    var awesomplete = new Awesomplete(el, {
                        list: data.list,
                        minChars: 1
                    });
                });
            });
        },

        selectAutocomplete: function () {
            var $selects = $('[data-select-autocomplete]');

            if ( !$selects.length ) return;

            function format(data) {
                if (!data.id) return data.text;
                var markup = data.text;
                return markup;
            }

            $.each($selects, function(index, select) {
                var dataUrl = select.getAttribute('data-select-autocomplete') || null;
                var dataInitValue = select.getAttribute('data-select-autocomplete-init-value') || null;
                var dataInitText = select.getAttribute('data-select-autocomplete-init-text') || null;
                var dataEmptyText = select.getAttribute('data-select-autocomplete-empty-text') || '-- select options --';

                if ( dataUrl ) {
                    var options = {
                        initSelection : function (element, callback) {
                            var data = null;
                            if (dataInitValue && dataInitText) {
                                data = {id: dataInitValue, text: dataInitText};
                            } else {
                                data = {id: '', text: dataEmptyText};
                            }
                            callback(data);
                        },
                        escapeMarkup: function(markup) { return markup; },
                        minimumInputLength: 1,
                        templateResult: format, 
                        allowClear: true,
                        placeholder: dataEmptyText,
                        ajax: {
                            url: dataUrl,
                            type: 'GET',
                            dataType: 'json',
                            delay: 300,
                            data: function (params) {
                                return {
                                    q: params.term, // search term
                                    page: params.page
                                };
                            },
                            processResults: function (data, params) {
                                params.page = params.page || 1;
                                return {
                                    results: data.items,
                                    pagination: {
                                        more: (params.page * 5) < data.total_count
                                    }
                                };
                            },
                            cache: true
                        }
                    };
                    $(select).select2(options);
                } else {
                    $(select).select2();
                    $(select).trigger("change");
                }
            });
        },

        textareaAutosize: function () {
            var textarea = document.querySelectorAll('[data-autosize]');

            if ( !textarea.length ) return;

            autosize( textarea );
        },

        textareaAutosizeUpdate: function () {
            var textarea = document.querySelectorAll('[data-autosize]');

            autosize.update( textarea );
        },

        discussionBox: function () {
            var $discussionBox = $('#discussionBox');

            if ( !$discussionBox.length ) return;

            var $discussionBoxContent = $discussionBox.find('.discussion-reply-box-content');
            var classClose = 'is-closed';
            var classTrigger = 'discussion-reply-box-trigger';

            var toggleEditor = function (e) {
                var $this = $(this);
                var $target = $( e.target );

                if ( $target.hasClass( classTrigger ) && $this.hasClass(classClose) ) {
                    Site.textareaAutosizeUpdate();
                    Site.clearDiscussionAttachmentList();

                    $this.removeClass(classClose);
                    $discussionBoxContent.find('textarea').focus();
                } else if ( $target.attr('type') === 'reset' ) {
                    $this.addClass(classClose);
                }
            };

            $discussionBox.on('click', toggleEditor);
        },

        inputBrowseFiles: function () {
            var $input = $('[data-input-browse-file]');

            if ( !$input.length ) return;

            var $attachmentList;

            var showAttachmentList = function (e) {
                $attachmentList = $( this.getAttribute('data-input-browse-file') );

                if ( !Suitcommerce.supportFileAPI() ) return;

                var attachedFiles = this.files;

                if ( !attachedFiles.length ) return;

                resetAttachmentList();

                $attachmentList.append( createAttachedList( attachedFiles ) );
            };

            $input.change( showAttachmentList );

            function resetAttachmentList() {
                $attachmentList.empty();
            }

            function createAttachedList( files ) {
                var result = '';

                for (var i = 0; i < files.length; i++) {
                    var current = files[i];

                    result += '<li>';
                    result += '<span class="fa fa-lg fa-fw ';

                    if ( Suitcommerce.isImage( current.name ) ) {
                        result += 'fa-file-image-o';
                    } else if ( Suitcommerce.isPDF( current.name ) ) {
                        result += 'fa-file-pdf-o';
                    } else if ( Suitcommerce.isDOC( current.name ) ) {
                        result += 'fa-file-word-o';
                    } else if ( Suitcommerce.isPPT( current.name ) ) {
                        result += 'fa-file-powerpoint-o';
                    } else if ( Suitcommerce.isXLS( current.name ) ) {
                        result += 'fa-file-excel-o';
                    }

                    result += '"></span> <small>';
                    result += current.name;
                    result += '</small></li>';
                }

                return result;
            }
        },

        clearDiscussionAttachmentList: function () {
            $('#attachmentList').empty();
        },

        modal: function () {
            var $modal      = $('.modal'),
                $modalTitle = $modal.find('.modal-title'),
                $modalBody  = $modal.find('.modal-dialog-content'),
                $main       = $('#main');

            var openModal = function (e) {
                e.preventDefault();

                var $this = $(this);
                var title = $this.attr('data-modal');
                var content = $this.next('.modal-content-dummy').html();

                $modalTitle
                    .empty()
                    .append(title);

                $modalBody
                    .empty()
                    .append(content);

                $modal.fadeIn();
            };

            var closeModal = function () {
                $('.modal').fadeOut();
            };

            $main.on('click', '[data-modal]', openModal);
            $('body').on('click', '.modal-dialog-close-btn', closeModal);
            $(document).keyup( function (e) {
                if ( e.keyCode === 27 ) {
                    closeModal();
                }
            });
        },

        accordion: function () {
            var $accordion = $('.accordion');

            var $main = $('#main');
            var speed = 200;
            var selector = {
                body: '.accordion-body',
                btn: '.accordion-btn'
            };
            var activeClass = 'accordion--opened';

            var openActiveAccordion = function (i, el) {
                 var $current = $(el);

                 if ( $current.hasClass( activeClass ) ) {
                    $current.find( selector.body ).slideDown(speed);
                 }
            };

            var toggleAccordion = function (e) {
                e.preventDefault();

                var $this = $(this);
                var $parent = $this.parent();
                var $accordionBody = $this.siblings( selector.body );

                $parent.toggleClass( activeClass );
                $accordionBody.slideToggle(speed);
            };

            $.each( $accordion, openActiveAccordion);

            $main.on('click', selector.btn, toggleAccordion);
        },

        executionDocList: function () {
            var $docList        = $('#executionDocList'),
                $btnAdd         = $('#btnAddExecutionDoc'),
                $inputTodoTitle = $('#newTodoTitle'),
                template        = $('#templateExecutionDoc').html(),
                $template       = $( template );

            var createNewExecDoc = function (e) {
                var valueTitle = $inputTodoTitle.val();

                if ( $.trim(valueTitle) === '' || valueTitle === null ) {
                    return $inputTodoTitle.focus();
                }

                e.preventDefault();

                // create element from template
                var $newTemplate        = $template.clone(true);
                var $newTemplateForm    = $newTemplate.find('[data-validate-form]');

                var selectCheckboxID    = Suitcommerce.getUID();
                var $labelCheckbox      = $newTemplate.find('.label-select');
                var $inputCheckbox      = $labelCheckbox.parent().find('select');
                var $textSelectValue    = $inputCheckbox.parents('.accordion').find('.select-text-value');

                var inputTitleID        = Suitcommerce.getUID();
                var $labelInputTitle    = $newTemplate.find('#labelInputTitle');
                var $elemInputTitle     = $newTemplate.find('#elemInputTitle');

                var inputFileID         = Suitcommerce.getUID();
                var $labelInputFile     = $newTemplate.find('#labelInputFile');
                var $elemInputFile      = $newTemplate.find('#elemInputFile');

                var $inputTag           = $newTemplate.find('[data-input-tag]');

                $labelCheckbox
                    .attr('for', selectCheckboxID);
                $inputCheckbox.attr('id', selectCheckboxID);
                console.log($textSelectValue);

                $textSelectValue.text(valueTitle);

                $labelInputTitle
                    .removeAttr('id')
                    .attr('for', inputTitleID);
                $elemInputTitle
                    .attr('id', inputTitleID)
                    .attr('value', valueTitle);

                $labelInputFile
                    .removeAttr('id')
                    .attr('for', inputFileID);
                $elemInputFile.attr('id', inputFileID);

                $docList.append( $newTemplate );

                validateForm( $newTemplateForm );

                insignia( $inputTag[0], {
                    deletion: true
                });
            };

            var openDocumentationFormBox = function (e) {
                var $this       = $(this),
                    isResolved  = $this.attr('data-resolved') === 'true';

                if ( isResolved ) return;

                e.preventDefault();

                var $accordionBtn = $this.parents('.accordion').find('.accordion-btn');
                var $formDocument = $this.parents('.accordion').find('[data-validate-form]');

                $this.attr('disabled', 'disabled');
                $accordionBtn.click();
                $formDocument.submit();
            };

            $btnAdd.click( createNewExecDoc );

            $docList.on('click', 'input[data-resolved]', openDocumentationFormBox);

            function toggleBtnAddDisableness() {
                if ( $btnAdd.attr('disabled') ) {
                    $btnAdd.removeAttr('disabled');
                } else {
                    $btnAdd.attr('disabled', 'disabled');
                }
            }

            function validateForm( form ) {
                form.bazeValidate({
                    classInvalid: 'form-input--error',
                    classValid  : 'form-input--success',
                    classMsg    : 'form-msg'
                });
            }
        },

        equalHeight: function () {
            var isFlexboxSupported = Modernizr.flexbox;

            if ( isFlexboxSupported ) return;

            var $parent = $('[data-equal-height]'),
                $child  = $parent.children(),
                $img    = $parent.find('img');

            if ( !$parent.length ) return;

            var maxHeight = 0;

            var setEqualHeight = function () {
                $.each($child, function(index, elem) {
                    var currentHeight = $(elem).innerHeight();

                    if ( currentHeight > maxHeight ) {
                        maxHeight = currentHeight;
                    }
                });
                $child.height( maxHeight );
            };

            if ( $img.length ) {
                $img.load(function () {
                    setEqualHeight();
                });
            } else {
                setEqualHeight();
            }
        },

        dashboardTab: function () {
            var $tabs = $('.dashboard-tab');

            if ( !$tabs.length ) return;

            var stateActive = 'is-active';

            var DTAB = {

                // Set equal width to all tab navs
                dTabNavsWidth: function () {
                    if ( Modernizr.flexbox ) return;

                    var tabNavs = document.querySelectorAll('.dashboard-tab-nav');
                    var count   = tabNavs.length;
                    var width   = 100 / count;

                    [].forEach.call(tabNavs, function (elem, index) {
                        elem.style.width = width + '%';
                    });
                },

                navigation: function () {
                    var $tabNavs = $('.dashboard-tab-nav');

                    $tabNavs.on('click', function (e) {
                        e.preventDefault();

                        var $this = $(this);

                        if ( $this.hasClass(stateActive) ) return;

                        var $parent         = $(this).parents('.dashboard-tab');
                        var $tabContents    = $parent.find('.dashboard-tab__content');
                        var $target         = $( this.getAttribute('href') );

                        $tabContents.removeClass(stateActive);
                        $target.addClass(stateActive);

                        $this.siblings('a').removeClass(stateActive);
                        $this.addClass(stateActive);
                    });
                }
            };

            DTAB.dTabNavsWidth();
            DTAB.navigation();
        },

        tooltip: function () {
            var $triggers = $('[data-tooltip]');

            if ( !$triggers.length ) return;

            $.each($triggers, function(index, elem) {
                var text = elem.getAttribute('data-tooltip');

                $(elem).tooltip(text);
            });
        },

        wysiwyg: function () {
            var $inputs = $('[data-wysiwyg]');

            if (!$inputs.length) return;

            $.each($inputs, function (index, elem) {
                var dataURL = elem.getAttribute('data-wysiwyg-upload-source');

                if (dataURL == null || dataURL == '') {
                    $(elem).ckeditor({
                        htmlEncodeOutput: true,
                        //extraPlugins: 'autogrow',
                        //autoGrow_maxHeight: 400,
                        //autoGrow_bottomSpace: 50,
                        //removePlugins: 'resize',
                        allowedContent: true
                    });
                } else {
                    $(elem).ckeditor({
                        filebrowserImageUploadUrl: dataURL,
                        htmlEncodeOutput: true,
                        //extraPlugins: 'autogrow',
                        //autoGrow_maxHeight: 400,
                        //autoGrow_bottomSpace: 50,
                        //removePlugins: 'resize',
                        allowedContent: true
                    });
                }
            });
        },

        scrollToTop: function () {
            var $trigger = $('[data-scroll-to-top]');

            if ( !$trigger.length ) return;

            $trigger.on('click', function (e) {
                e.preventDefault();

                $('html, body').animate({
                    scrollTop: 0
                }, 500);
            });
        },

        openLink: function () {
            var $trigger = $('[data-open-link]');
            if (!$trigger.length) return;
            $.each($trigger, function (index, elem) {
                var dataID = elem.getAttribute('data-open-link');
                var dataURL = elem.getAttribute('data-link-pattern');
                if (dataURL != null && dataURL != '') {
                    $(elem).on('click', function (e) {
                        e.preventDefault();
                        window.open(dataURL.replace("0", $(dataID).val()), '_blank');
                    });
                }
            });
        }

    };

    Site.init();

})( window, document, jQuery );
